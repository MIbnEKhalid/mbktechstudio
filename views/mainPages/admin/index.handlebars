<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel - Support Management</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.min.css" rel="stylesheet">
    <!-- Added for charts -->
    <style>
        :root {
            --primary-color: #6366f1;
            --secondary-color: #8b5cf6;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --info-color: #06b6d4;
            --dark-color: #1f2937;
            --light-color: #f8fafc;
            --border-color: #e5e7eb;
            --text-primary: #111827;
            --text-secondary: #4b5563;
            /* Darkened for better contrast */
            --sidebar-width: 280px;
            --header-height: 70px;
            --border-radius: 0.75rem;
            --box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --box-shadow-lg: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        [data-theme="dark"] {
            --light-color: #1f2937;
            --text-primary: #f8fafc;
            --text-secondary: #9ca3af;
            --border-color: #374151;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: var(--light-color);
            color: var(--text-primary);
            line-height: 1.6;
        }

        /* Header */
        .admin-header {
            height: var(--header-height);
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
            box-shadow: var(--box-shadow);
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1030;
            display: flex;
            align-items: center;
            padding: 0 1.5rem;
        }

        .header-brand {
            color: white;
            font-size: 1.5rem;
            font-weight: 700;
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .header-actions {
            margin-left: auto;
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .theme-toggle {
            background: none;
            border: none;
            color: white;
            font-size: 1.25rem;
            padding: 0.5rem;
            border-radius: 0.5rem;
            transition: var(--transition);
        }

        .theme-toggle:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .mobile-menu-btn {
            background: none;
            border: none;
            color: white;
            font-size: 1.25rem;
            padding: 0.5rem;
            border-radius: 0.5rem;
            transition: var(--transition);
            display: none;
        }

        .mobile-menu-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        /* Sidebar */
        .sidebar {
            position: fixed;
            top: var(--header-height);
            left: 0;
            width: var(--sidebar-width);
            height: calc(100vh - var(--header-height));
            background: white;
            border-right: 1px solid var(--border-color);
            box-shadow: var(--box-shadow);
            overflow-y: auto;
            transition: var(--transition);
            z-index: 1020;
        }

        [data-theme="dark"] .sidebar {
            background: var(--dark-color);
        }

        .sidebar-nav {
            padding: 1.5rem 0;
        }

        .nav-item {
            margin: 0.25rem 1rem;
        }

        .nav-link {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.875rem 1rem;
            color: var(--text-secondary);
            text-decoration: none;
            border-radius: var(--border-radius);
            font-weight: 500;
            transition: var(--transition);
            position: relative;
        }

        .nav-link:hover {
            background-color: rgba(99, 102, 241, 0.1);
            color: var(--primary-color);
            transform: translateX(4px);
            /* Subtle hover animation */
        }

        .nav-link.active {
            background-color: var(--primary-color);
            color: white;
            box-shadow: var(--box-shadow);
        }

        .nav-link i {
            width: 1.25rem;
            text-align: center;
        }

        /* Main Content */
        .main-content {
            margin-left: var(--sidebar-width);
            margin-top: var(--header-height);
            padding: 2.5rem;
            /* Increased padding for better spacing */
            min-height: calc(100vh - var(--header-height));
            transition: var(--transition);
        }

        /* Cards */
        .card {
            background: white;
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            transition: var(--transition);
        }

        [data-theme="dark"] .card {
            background: var(--dark-color);
        }

        .card:hover {
            box-shadow: var(--box-shadow-lg);
            transform: translateY(-2px);
            /* Lift on hover */
        }

        .card-header {
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            border-bottom: 1px solid var(--border-color);
            padding: 1.25rem 1.5rem;
            font-weight: 600;
            color: var(--text-primary);
        }

        [data-theme="dark"] .card-header {
            background: linear-gradient(135deg, #374151 0%, #4b5563 100%);
        }

        .card-body {
            padding: 1.75rem;
            /* Increased for readability */
        }

        /* Stats Cards */
        .stat-card {
            position: relative;
            overflow: hidden;
            display: grid;
            /* Use grid for even layout */
            grid-template-columns: 1fr;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        }

        .stat-value {
            font-size: 2.5rem;
            font-weight: 700;
            line-height: 1;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            color: var(--text-secondary);
            font-size: 0.875rem;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.025em;
        }

        .stat-icon {
            position: absolute;
            top: 1.5rem;
            right: 1.5rem;
            font-size: 2rem;
            opacity: 0.7;
        }

        /* Table */
        .table-container {
            background: white;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: var(--box-shadow);
        }

        [data-theme="dark"] .table-container {
            background: var(--dark-color);
        }

        .table {
            margin-bottom: 0;
        }

        .table thead th {
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            border-bottom: 2px solid var(--border-color);
            font-weight: 600;
            color: var(--text-primary);
            padding: 1rem;
            cursor: pointer;
            /* For sortable columns */
        }

        [data-theme="dark"] .table thead th {
            background: linear-gradient(135deg, #374151 0%, #4b5563 100%);
        }

        .table tbody tr:nth-child(odd) {
            background-color: rgba(243, 244, 246, 0.5);
            /* Zebra striping */
        }

        [data-theme="dark"] .table tbody tr:nth-child(odd) {
            background-color: rgba(55, 65, 81, 0.5);
        }

        .table tbody td {
            padding: 1rem;
            vertical-align: middle;
            border-bottom: 1px solid var(--border-color);
        }

        .table tbody tr:hover {
            background-color: rgba(99, 102, 241, 0.1);
        }

        /* Badges */
        .badge {
            padding: 0.375rem 0.75rem;
            font-size: 0.75rem;
            font-weight: 600;
            border-radius: 0.5rem;
            text-transform: uppercase;
            letter-spacing: 0.025em;
        }

        /* Buttons */
        .btn {
            font-weight: 600;
            padding: 0.75rem 1.5rem;
            border-radius: var(--border-radius);
            transition: var(--transition);
            text-transform: uppercase;
            letter-spacing: 0.025em;
            font-size: 0.875rem;
        }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: var(--box-shadow);
        }

        .btn:focus {
            outline: 2px solid var(--primary-color);
            outline-offset: 2px;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border: none;
            color: white;
        }

        .btn-sm {
            padding: 0.5rem 1rem;
            font-size: 0.75rem;
        }

        /* Forms */
        .form-control,
        .form-select {
            border: 2px solid var(--border-color);
            border-radius: var(--border-radius);
            padding: 0.75rem 1rem;
            transition: var(--transition);
        }

        .form-control:focus,
        .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }

        /* Modal */
        .modal-content {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow-lg);
        }

        .modal-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            border-bottom: none;
            border-radius: var(--border-radius) var(--border-radius) 0 0;
        }

        /* Loading */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(4px);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        }

        [data-theme="dark"] .loading-overlay {
            background: rgba(0, 0, 0, 0.8);
        }

        .spinner {
            width: 3rem;
            height: 3rem;
            border: 4px solid var(--border-color);
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Alert */
        .toast {
            box-shadow: var(--box-shadow-lg);
            border: none;
            border-radius: var(--border-radius);
        }

        /* Mobile Responsive */
        @media (max-width: 992px) {

            /* Adjusted for tablets */
            .main-content {
                padding: 1.5rem;
            }

            .stat-value {
                font-size: 2rem;
            }
        }

        @media (max-width: 768px) {
            .mobile-menu-btn {
                display: block;
            }

            .sidebar {
                transform: translateX(-100%);
                width: 100%;
                max-width: var(--sidebar-width);
            }

            .sidebar.show {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
                padding: 1rem;
            }

            .header-brand .d-none {
                display: none !important;
            }

            .stat-value {
                font-size: 1.8rem;
            }

            .table-responsive {
                font-size: 0.875rem;
            }

            .btn {
                padding: 0.5rem 1rem;
                font-size: 0.75rem;
            }
        }

        /* Sidebar Overlay */
        .sidebar-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
            z-index: 1010;
            display: none;
        }

        .sidebar-overlay.show {
            display: block;
        }

        /* Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 6px;
        }

        ::-webkit-scrollbar-track {
            background: var(--light-color);
        }

        ::-webkit-scrollbar-thumb {
            background: var(--border-color);
            border-radius: 3px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--text-secondary);
        }

        /* Animation */
        .fade-in {
            animation: fadeIn 0.3s ease-in-out;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Status Colors (with better contrast) */
        .text-pending {
            color: var(--warning-color);
        }

        .text-in-progress {
            color: var(--info-color);
        }

        .text-resolved {
            color: var(--success-color);
        }

        .text-closed {
            color: var(--text-secondary);
        }

        .text-urgent {
            color: var(--danger-color);
        }

        .text-high {
            color: var(--warning-color);
        }

        .text-normal {
            color: var(--info-color);
        }

        .text-low {
            color: var(--text-secondary);
        }

        .bg-pending {
            background-color: rgba(var(--warning-color), 0.1);
            color: var(--warning-color);
        }

        .bg-in-progress {
            background-color: rgba(var(--info-color), 0.1);
            color: var(--info-color);
        }

        .bg-resolved {
            background-color: rgba(var(--success-color), 0.1);
            color: var(--success-color);
        }

        .bg-closed {
            background-color: rgba(var(--text-secondary), 0.1);
            color: var(--text-secondary);
        }

        .bg-urgent {
            background-color: rgba(var(--danger-color), 0.1);
            color: var(--danger-color);
        }

        .bg-high {
            background-color: rgba(var(--warning-color), 0.1);
            color: var(--warning-color);
        }

        .bg-normal {
            background-color: rgba(var(--info-color), 0.1);
            color: var(--info-color);
        }

        .bg-low {
            background-color: rgba(var(--text-secondary), 0.1);
            color: var(--text-secondary);
        }

        /* Sort Icons */
        .sort-icon {
            color: var(--text-secondary);
        }
        
    </style>
</head>

<body data-theme="light"> <!-- Default to light; toggle via JS -->
    <!-- Sidebar Overlay -->
    <div class="sidebar-overlay" id="sidebarOverlay"></div>

    <!-- Header -->
    <header class="admin-header" role="banner">
        <button class="mobile-menu-btn" id="mobileMenuBtn" aria-label="Toggle sidebar">
            <i class="fas fa-bars"></i>
        </button>
        <a href="#" class="header-brand" aria-label="Admin Panel Home">
            <i class="fas fa-shield-alt"></i>
            <span>Admin Panel</span>
            <span class="d-none d-md-inline text-white-50 ms-2">/ Support Management</span>
        </a>
        <div class="header-actions">
            <span class="text-white-50 d-none d-sm-inline">Welcome, Admin</span>
            <button class="theme-toggle" id="themeToggle" aria-label="Toggle dark mode">
                <i class="fas fa-moon"></i>
            </button>
        </div>
    </header>

    <!-- Sidebar -->
    <nav class="sidebar" id="sidebar" role="navigation" aria-label="Main navigation">
        <div class="sidebar-nav">
            <div class="nav-item">
                <a href="#" class="nav-link active" data-section="dashboard" title="View Dashboard">
                    <i class="fas fa-tachometer-alt"></i>
                    <span>Dashboard</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="#" class="nav-link" data-section="submissions" data-filter="all" title="View All Submissions">
                    <i class="fas fa-inbox"></i>
                    <span>All Submissions</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="#" class="nav-link" data-section="submissions" data-filter="pending"
                    title="View Pending Submissions">
                    <i class="fas fa-clock"></i>
                    <span>Pending</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="#" class="nav-link" data-section="submissions" data-filter="in_progress"
                    title="View In Progress Submissions">
                    <i class="fas fa-spinner"></i>
                    <span>In Progress</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="#" class="nav-link" data-section="submissions" data-filter="resolved"
                    title="View Resolved Submissions">
                    <i class="fas fa-check-circle"></i>
                    <span>Resolved</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="#" class="nav-link" data-section="spam-protection" title="Manage Spam Protection">
                    <i class="fas fa-shield-alt"></i>
                    <span>Spam Protection</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="#" class="nav-link" onclick="exportData()" title="Export Data">
                    <i class="fas fa-download"></i>
                    <span>Export Data</span>
                </a>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="main-content" role="main">
        <!-- Dashboard Section -->
        <section id="dashboard-section" class="content-section fade-in">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0">
                    <i class="fas fa-tachometer-alt text-primary me-2"></i>
                    Dashboard
                </h1>
                <button class="btn btn-outline-primary btn-sm" onclick="refreshDashboard()"
                    aria-label="Refresh Dashboard">
                    <i class="fas fa-sync-alt me-1 fa-spin"></i> <!-- Added spin animation -->
                    Refresh
                </button>
            </div>

            <!-- Stats Cards -->
            <div class="row g-4 mb-4" id="statsContainer"
                style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));">
                <!-- Stats will be loaded here -->
            </div>

            <!-- Dashboard Chart -->
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-chart-bar me-2"></i>
                    Submission Trends
                </div>
                <div class="card-body">
                    <canvas id="submissionChart" height="200"></canvas>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="row g-4">
                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-header">
                            <i class="fas fa-chart-line me-2"></i>
                            Recent Activity
                        </div>
                        <div class="card-body" id="recentActivity">
                            <!-- Recent activity will be loaded here -->
                        </div>
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-header">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            High Priority Items
                        </div>
                        <div class="card-body" id="highPriorityItems">
                            <!-- High priority items will be loaded here -->
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Submissions Section -->
        <section id="submissions-section" class="content-section fade-in" style="display: none;">
            <div
                class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4">
                <h1 class="h3 mb-2 mb-md-0">
                    <i class="fas fa-inbox text-primary me-2"></i>
                    <span id="submissionsTitle">Submissions</span>
                </h1>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary btn-sm" onclick="refreshSubmissions()"
                        aria-label="Refresh Submissions">
                        <i class="fas fa-sync-alt me-1"></i>
                        <span class="d-none d-sm-inline">Refresh</span>
                    </button>
                    <button class="btn btn-success btn-sm" onclick="exportSubmissions()"
                        aria-label="Export Submissions">
                        <i class="fas fa-download me-1"></i>
                        <span class="d-none d-sm-inline">Export</span>
                    </button>
                </div>
            </div>

            <!-- Filters -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label" for="filterStatus">Status</label>
                            <select class="form-select" id="filterStatus" aria-label="Filter by Status">
                                <option value="all">All Status</option>
                                <option value="pending">Pending</option>
                                <option value="in_progress">In Progress</option>
                                <option value="resolved">Resolved</option>
                                <option value="closed">Closed</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label" for="filterSubject">Subject</label>
                            <select class="form-select" id="filterSubject" aria-label="Filter by Subject">
                                <option value="all">All Subjects</option>
                                <option value="Support">Support</option>
                                <option value="Feedback">Feedback</option>
                                <option value="Collaboration">Collaboration</option>
                                <option value="General Inquiry">General Inquiry</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label" for="filterPriority">Priority</label>
                            <select class="form-select" id="filterPriority" aria-label="Filter by Priority">
                                <option value="all">All Priorities</option>
                                <option value="urgent">Urgent</option>
                                <option value="high">High</option>
                                <option value="normal">Normal</option>
                                <option value="low">Low</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label" for="filterFromDate">From Date</label>
                            <input type="date" class="form-control" id="filterFromDate" aria-label="Filter from date">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label" for="filterToDate">To Date</label>
                            <input type="date" class="form-control" id="filterToDate" aria-label="Filter to date">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label" for="filterSearch">Search</label>
                            <input type="text" class="form-control" id="filterSearch" list="searchSuggestions"
                                placeholder="Search by name, email..." aria-label="Search Submissions">
                            <datalist id="searchSuggestions">
                                <option value="Support">
                                <option value="Feedback">
                                <option value="Urgent">
                            </datalist>
                        </div>
                    </div>
                    <div class="d-flex justify-content-end mt-3">
                        <button class="btn btn-outline-secondary btn-sm" onclick="clearFilters()"
                            aria-label="Clear All Filters">Clear Filters</button>
                    </div>
                </div>
            </div>

            <!-- Submissions Table -->
            <div class="table-container">
                <div class="table-responsive">
                    <table class="table table-hover"> <!-- Added table-hover for better interaction -->
                        <thead>
                            <tr>
                                <th><input type="checkbox" id="selectAll" aria-label="Select All"></th>
                                <!-- Added for bulk actions -->
                                <th data-column="id" class="d-none d-md-table-cell"># <i class="fas fa-sort ms-1 sort-icon"></i></th>
                                <th data-column="ticket_number">Ticket <i class="fas fa-sort ms-1 sort-icon"></i></th>
                                <th data-column="subject">Subject <i class="fas fa-sort ms-1 sort-icon"></i></th>
                                <th data-column="name" class="d-none d-lg-table-cell">Contact <i class="fas fa-sort ms-1 sort-icon"></i></th>
                                <th data-column="status">Status <i class="fas fa-sort ms-1 sort-icon"></i></th>
                                <th data-column="priority" class="d-none d-lg-table-cell">Priority <i class="fas fa-sort ms-1 sort-icon"></i></th>
                                <th data-column="submission_timestamp" class="d-none d-md-table-cell">Date <i class="fas fa-sort ms-1 sort-icon"></i></th>
                                <th width="120">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="submissionsTableBody">
                            <!-- Table content will be loaded here -->
                        </tbody>
                    </table>
                </div>
                <div class="d-flex flex-column flex-md-row justify-content-between align-items-center p-3 border-top">
                    <div id="paginationInfo" class="mb-2 mb-md-0 text-muted">
                        <!-- Pagination info -->
                    </div>
                    <div class="d-flex gap-2">
                        <select class="form-select form-select-sm" id="bulkAction" aria-label="Bulk Actions">
                            <option value="">Bulk Actions</option>
                            <option value="resolved">Mark Resolved</option>
                            <option value="closed">Mark Closed</option>
                            <option value="delete">Delete</option>
                        </select>
                        <button class="btn btn-primary btn-sm" onclick="applyBulkAction()"
                            aria-label="Apply Bulk Action">Apply</button>
                    </div>
                    <nav id="paginationNav">
                        <!-- Pagination controls -->
                    </nav>
                </div>
            </div>
        </section>

        <!-- Spam Protection Section -->
        <section id="spam-protection-section" class="content-section fade-in" style="display: none;">
            <div
                class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4">
                <h1 class="h3 mb-2 mb-md-0">
                    <i class="fas fa-shield-alt text-primary me-2"></i>
                    Spam Protection
                </h1>
                <button class="btn btn-primary btn-sm" onclick="showAddBlockModal()" aria-label="Add New Block">
                    <i class="fas fa-plus me-1"></i>
                    Add Block
                </button>
            </div>

            <div class="card">
                <div class="card-body">
                    <ul class="nav nav-tabs mb-3" id="blockTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="emails-tab" data-bs-toggle="tab"
                                data-bs-target="#emailsTab" role="tab" aria-selected="true">Blocked Emails</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="phones-tab" data-bs-toggle="tab" data-bs-target="#phonesTab"
                                role="tab" aria-selected="false">Blocked Phones</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="keywords-tab" data-bs-toggle="tab"
                                data-bs-target="#keywordsTab" role="tab" aria-selected="false">Blocked Keywords</button>
                        </li>
                    </ul>

                    <div class="tab-content">
                        <div class="tab-pane fade show active" id="emailsTab" role="tabpanel">
                            <div id="blockedEmailsTable"></div>
                        </div>
                        <div class="tab-pane fade" id="phonesTab" role="tabpanel">
                            <div id="blockedPhonesTable"></div>
                        </div>
                        <div class="tab-pane fade" id="keywordsTab" role="tabpanel">
                            <div id="blockedKeywordsTable"></div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <!-- Submission Details Modal -->
    <div class="modal fade" id="submissionModal" tabindex="-1" aria-labelledby="submissionModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="submissionModalLabel">
                        <i class="fas fa-eye me-2"></i>
                        Submission Details
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="modal-body" id="submissionDetails">
                    <!-- Details will be loaded here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
                        aria-label="Close Modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="saveSubmissionChanges()"
                        aria-label="Save Changes">
                        <i class="fas fa-save me-1"></i>
                        Save Changes
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Block Modal -->
    <div class="modal fade" id="addBlockModal" tabindex="-1" aria-labelledby="addBlockModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addBlockModalLabel">
                        <i class="fas fa-plus me-2"></i>
                        Add New Block
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addBlockForm">
                        <div class="mb-3">
                            <label class="form-label" for="blockType">Block Type</label>
                            <select class="form-select" id="blockType" required aria-label="Select Block Type">
                                <option value="email">Email Address</option>
                                <option value="phone">Phone Number</option>
                                <option value="keyword">Keyword</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="blockValue">Value to Block</label>
                            <input type="text" class="form-control" id="blockValue" required
                                aria-label="Enter Value to Block">
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="blockReason">Reason (Optional)</label>
                            <textarea class="form-control" id="blockReason" rows="3"
                                placeholder="Why is this being blocked?" aria-label="Enter Block Reason"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
                        aria-label="Cancel">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="addBlock()" aria-label="Add Block">
                        <i class="fas fa-shield-alt me-1"></i>
                        Add Block
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay" style="display: none;">
        <div class="spinner"></div>
    </div>

    <!-- Toast Container -->
    <div class="toast-container position-fixed top-0 end-0 p-3">
        <div id="alertToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true"
            data-bs-delay="5000">
            <div class="toast-header">
                <i class="fas fa-info-circle text-primary me-2"></i>
                <strong class="me-auto">Notification</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                <!-- Toast message will be set here -->
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Global variables
        let currentPage = 1;
        let currentFilters = {};
        let currentSubmissionId = null;
        let searchTimeout = null;
        let submissionChart = null;

        // Initialize app
        document.addEventListener('DOMContentLoaded', function () {
            initializeApp();
        });

        function initializeApp() {
            setupEventListeners();
            initDarkMode();

            const { section, filter } = parseHash();

            let finalSection = section;
            let finalFilter = filter;
            if (!finalSection) {
                try {
                    const stored = sessionStorage.getItem('adminActiveSection');
                    if (stored) {
                        const obj = JSON.parse(stored);
                        finalSection = obj.section || finalSection;
                        finalFilter = obj.filter || finalFilter;
                    }
                } catch (e) { }
            }

            showSection(finalSection || 'dashboard', finalFilter || null);
        }

        function initDarkMode() {
            const theme = localStorage.getItem('theme') || 'light';
            document.body.dataset.theme = theme;
            const toggleIcon = document.getElementById('themeToggle').querySelector('i');
            toggleIcon.className = theme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
        }

        function parseHash() {
            try {
                const hash = (window.location.hash || '').replace(/^#/, '');
                if (!hash) return {};
                const params = new URLSearchParams(hash);
                return {
                    section: params.get('section'),
                    filter: params.get('filter')
                };
            } catch (e) {
                return {};
            }
        }

        function saveCurrentSection(section, filter = null) {
            try {
                const params = new URLSearchParams();
                if (section) params.set('section', section);
                if (filter) params.set('filter', filter);
                history.replaceState(null, '', `#${params.toString()}`);
                try {
                    sessionStorage.setItem('adminActiveSection', JSON.stringify({ section, filter }));
                } catch (e) { }
            } catch (e) { }
        }

        function setActiveNavBySection(section, filter = null) {
            let selector = `.nav-link[data-section="${section}"]`;
            const candidates = Array.from(document.querySelectorAll(selector));
            if (candidates.length === 0) return;

            let chosen = null;
            if (filter) {
                chosen = candidates.find(c => c.dataset.filter === filter);
            }
            if (!chosen) chosen = candidates[0];

            document.querySelectorAll('.nav-link').forEach(l => l.classList.remove('active'));
            if (chosen) chosen.classList.add('active');
        }

        function toggleDarkMode() {
            const currentTheme = document.body.dataset.theme;
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            document.body.dataset.theme = newTheme;
            localStorage.setItem('theme', newTheme);
            const toggleIcon = document.getElementById('themeToggle').querySelector('i');
            toggleIcon.className = newTheme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
            if (submissionChart) submissionChart.update();
        }

        function setupEventListeners() {
            document.getElementById('mobileMenuBtn').addEventListener('click', toggleSidebar);
            document.getElementById('sidebarOverlay').addEventListener('click', closeSidebar);
            document.getElementById('themeToggle').addEventListener('click', toggleDarkMode);
            document.querySelectorAll('.nav-link[data-section]').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const section = link.dataset.section;
                    const filter = link.dataset.filter;
                    showSection(section, filter);
                    setActiveNav(link);
                    saveCurrentSection(section, filter);
                    closeSidebar();
                });
            });

            ['filterStatus', 'filterSubject', 'filterPriority', 'filterFromDate', 'filterToDate'].forEach(id => {
                document.getElementById(id).addEventListener('change', applyFilters);
            });

            document.getElementById('filterSearch').addEventListener('input', debounceSearch);
            document.getElementById('selectAll').addEventListener('change', toggleSelectAll);

            document.querySelectorAll('thead th[data-column]').forEach(th => {
                th.addEventListener('click', () => {
                    const column = th.dataset.column;
                    sortTable(column);
                });
            });

            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
            const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
        }

        function showSection(section, filter = null) {
            const sectionEl = document.getElementById(`${section}-section`);
            if (!sectionEl) {
                section = 'dashboard';
            }

            document.querySelectorAll('.content-section').forEach(sec => {
                sec.style.display = 'none';
            });

            document.getElementById(`${section}-section`).style.display = 'block';

            setActiveNavBySection(section, filter);

            saveCurrentSection(section, filter);

            switch (section) {
                case 'dashboard':
                    if (!document.getElementById('statsContainer').innerHTML) loadDashboard();
                    break;
                case 'submissions':
                    if (filter && filter !== 'all') {
                        const statusEl = document.getElementById('filterStatus');
                        if (statusEl) {
                            statusEl.value = filter;
                        }
                        currentFilters.status = filter;
                    }
                    if (!document.getElementById('submissionsTableBody').innerHTML) loadSubmissions();
                    break;
                case 'spam-protection':
                    if (!document.getElementById('blockedEmailsTable').innerHTML) loadSpamProtection();
                    break;
            }
        }

        function setActiveNav(activeLink) {
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });
            activeLink.classList.add('active');
        }

        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('sidebarOverlay');

            sidebar.classList.toggle('show');
            overlay.classList.toggle('show');
        }

        function closeSidebar() {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('sidebarOverlay');

            sidebar.classList.remove('show');
            overlay.classList.remove('show');
        }

        function showLoading(show = true) {
            document.getElementById('loadingOverlay').style.display = show ? 'flex' : 'none';
        }

        function showToast(message, type = 'info') {
            const toast = document.getElementById('alertToast');
            const toastBody = toast.querySelector('.toast-body');
            const toastIcon = toast.querySelector('.toast-header i');

            toastBody.textContent = message;

            const icons = {
                success: 'fas fa-check-circle text-success',
                error: 'fas fa-exclamation-circle text-danger',
                warning: 'fas fa-exclamation-triangle text-warning',
                info: 'fas fa-info-circle text-primary'
            };

            toastIcon.className = icons[type] + ' me-2';

            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
        }

        async function loadDashboard() {
            try {
                showLoading(true);

                const statsResponse = await fetch('/admin/dashboard/stats');
                if (statsResponse.ok) {
                    const stats = await statsResponse.json();
                    renderStats(stats);
                    renderSubmissionChart(stats);
                }

                const recentResponse = await fetch('/admin/submissions?limit=10&sortBy=submission_timestamp&sortOrder=DESC');
                if (recentResponse.ok) {
                    const data = await recentResponse.json();
                    renderRecentActivity(data.submissions);
                }

                const priorityResponse = await fetch('/admin/submissions?priority=urgent,high&limit=10');
                if (priorityResponse.ok) {
                    const data = await priorityResponse.json();
                    renderHighPriorityItems(data.submissions);
                }

            } catch (error) {
                console.error('Error loading dashboard:', error);
                showToast('Error loading dashboard data. Please try again.', 'error');
            } finally {
                showLoading(false);
            }
        }

        function renderStats(stats) {
            const container = document.getElementById('statsContainer');
            container.innerHTML = `
                <div class="col-sm-6 col-xl-3">
                    <div class="card stat-card">
                        <div class="card-body">
                            <div class="stat-value text-primary">${stats.total_submissions || 0}</div>
                            <div class="stat-label">Total Submissions</div>
                            <i class="fas fa-inbox stat-icon text-primary"></i>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6 col-xl-3">
                    <div class="card stat-card">
                        <div class="card-body">
                            <div class="stat-value text-warning">${stats.pending_count || 0}</div>
                            <div class="stat-label">Pending</div>
                            <i class="fas fa-clock stat-icon text-warning"></i>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6 col-xl-3">
                    <div class="card stat-card">
                        <div class="card-body">
                            <div class="stat-value text-success">${stats.resolved_count || 0}</div>
                            <div class="stat-label">Resolved</div>
                            <i class="fas fa-check-circle stat-icon text-success"></i>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6 col-xl-3">
                    <div class="card stat-card">
                        <div class="card-body">
                            <div class="stat-value text-danger">${stats.urgent_count || 0}</div>
                            <div class="stat-label">Urgent</div>
                            <i class="fas fa-exclamation-triangle stat-icon text-danger"></i>
                        </div>
                    </div>
                </div>
            `;
        }

        function renderSubmissionChart(stats) {
            const ctx = document.getElementById('submissionChart').getContext('2d');
            if (submissionChart) submissionChart.destroy();

            // Get CSS variable values
            const rootStyles = getComputedStyle(document.body);
            const primaryColor = rootStyles.getPropertyValue('--primary-color').trim();
            const warningColor = rootStyles.getPropertyValue('--warning-color').trim();
            const successColor = rootStyles.getPropertyValue('--success-color').trim();
            const dangerColor = rootStyles.getPropertyValue('--danger-color').trim();

            submissionChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Total', 'Pending', 'Resolved', 'Urgent'],
                    datasets: [{
                        label: 'Submissions',
                        data: [stats.total_submissions, stats.pending_count, stats.resolved_count, stats.urgent_count],
                        backgroundColor: [primaryColor, warningColor, successColor, dangerColor]
                    }]
                },
                options: {
                    responsive: true,
                    scales: { y: { beginAtZero: true } }
                }
            });
        }

        function renderRecentActivity(submissions) {
            const container = document.getElementById('recentActivity');

            if (!submissions || submissions.length === 0) {
                container.innerHTML = '<p class="text-muted mb-0">No recent submissions</p>';
                return;
            }

            container.innerHTML = submissions.map(submission => `
                <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                    <div>
                        <div class="fw-semibold">${submission.name}</div>
                        <div class="text-muted small">${submission.subject}</div>
                        <div class="text-muted small">${new Date(submission.submission_timestamp).toLocaleString()}</div>
                    </div>
                    <span class="badge bg-${getStatusColor(submission.status)}">${submission.status}</span>
                </div>
            `).join('');
        }

        function renderHighPriorityItems(submissions) {
            const container = document.getElementById('highPriorityItems');

            if (!submissions || submissions.length === 0) {
                container.innerHTML = '<p class="text-muted mb-0">No high priority items</p>';
                return;
            }

            container.innerHTML = submissions.map(submission => `
                <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                    <div>
                        <div class="fw-semibold">${submission.name}</div>
                        <div class="text-muted small">${submission.subject}</div>
                        <div class="text-muted small">Ticket: ${submission.ticket_number || 'N/A'}</div>
                    </div>
                    <div class="text-end">
                        <div class="badge bg-${getPriorityColor(submission.priority)} mb-1">${submission.priority}</div>
                        <div class="badge bg-${getStatusColor(submission.status)}">${submission.status}</div>
                    </div>
                </div>
            `).join('');
        }

        function refreshDashboard() {
            loadDashboard();
        }

        async function loadSubmissions(page = 1) {
            try {
                showLoading(true);

                const params = new URLSearchParams({
                    page: page,
                    limit: 20,
                    sortBy: currentFilters.sortBy || 'submission_timestamp',
                    sortOrder: currentFilters.sortOrder || 'DESC',
                    ...currentFilters
                });

                const response = await fetch(`/admin/submissions?${params}`);
                if (response.ok) {
                    const data = await response.json();
                    renderSubmissionsTable(data.submissions);
                    renderPagination(data.pagination);
                    currentPage = page;
                    updateSortIcons();
                } else {
                    throw new Error('Failed to load submissions');
                }

            } catch (error) {
                console.error('Error loading submissions:', error);
                showToast('Error loading submissions', 'error');
            } finally {
                showLoading(false);
            }
        }

        function renderSubmissionsTable(submissions) {
            const tbody = document.getElementById('submissionsTableBody');

            if (!submissions || submissions.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="9" class="text-center text-muted py-4">
                            <i class="fas fa-inbox fa-2x mb-2"></i>
                            <div>No submissions found</div>
                        </td>
                    </tr>
                `;
                return;
            }

            tbody.innerHTML = submissions.map(submission => `
                <tr>
                    <td><input type="checkbox" data-id="${submission.id}" aria-label="Select submission ${submission.id}"></td>
                    <td class="d-none d-md-table-cell">${submission.id}</td>
                    <td>
                        <span class="fw-semibold">${submission.ticket_number || '-'}</span>
                    </td>
                    <td>
                        <div class="fw-semibold">${truncateText(submission.subject, 30)}</div>
                        <div class="text-muted small d-lg-none">${submission.name}</div>
                    </td>
                    <td class="d-none d-lg-table-cell">
                        <div>${submission.name}</div>
                        <div class="text-muted small">${submission.email}</div>
                    </td>
                    <td>
                        <span class="badge bg-${getStatusColor(submission.status)}">${submission.status.replace('_', ' ')}</span>
                    </td>
                    <td class="d-none d-lg-table-cell">
                        <span class="badge bg-${getPriorityColor(submission.priority)}">${submission.priority}</span>
                    </td>
                    <td class="d-none d-md-table-cell">
                        <div class="small">${new Date(submission.submission_timestamp).toLocaleDateString()}</div>
                    </td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-primary" onclick="viewSubmission(${submission.id})" title="View Details" data-bs-toggle="tooltip" aria-label="View submission ${submission.id}">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-outline-success" onclick="updateStatus(${submission.id}, 'resolved')" title="Mark Resolved" data-bs-toggle="tooltip" aria-label="Mark resolved ${submission.id}">
                                <i class="fas fa-check"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');
        }

        function renderPagination(pagination) {
            const info = document.getElementById('paginationInfo');
            const nav = document.getElementById('paginationNav');

            if (!pagination) return;

            const start = (pagination.currentPage - 1) * pagination.limit + 1;
            const end = Math.min(pagination.currentPage * pagination.limit, pagination.totalCount);
            info.textContent = `Showing ${start}-${end} of ${pagination.totalCount} submissions`;

            if (pagination.totalPages <= 1) {
                nav.innerHTML = '';
                return;
            }

            let html = '<ul class="pagination pagination-sm mb-0">';

            if (pagination.currentPage > 1) {
                html += `<li class="page-item"><a class="page-link" href="#" onclick="loadSubmissions(${pagination.currentPage - 1}); return false;">Previous</a></li>`;
            }

            const startPage = Math.max(1, pagination.currentPage - 2);
            const endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);

            for (let i = startPage; i <= endPage; i++) {
                const active = i === pagination.currentPage ? 'active' : '';
                html += `<li class="page-item ${active}">
                    <a class="page-link" href="#" onclick="loadSubmissions(${i}); return false;">${i}</a>
                </li>`;
            }

            if (pagination.currentPage < pagination.totalPages) {
                html += `<li class="page-item"><a class="page-link" href="#" onclick="loadSubmissions(${pagination.currentPage + 1}); return false;">Next</a></li>`;
            }

            html += '</ul>';
            nav.innerHTML = html;
        }

        function sortTable(column) {
            if (currentFilters.sortBy === column) {
                currentFilters.sortOrder = currentFilters.sortOrder === 'ASC' ? 'DESC' : 'ASC';
            } else {
                currentFilters.sortBy = column;
                currentFilters.sortOrder = 'ASC';
            }
            loadSubmissions(1);
        }

        function updateSortIcons() {
            document.querySelectorAll('thead th[data-column] i.sort-icon').forEach(i => {
                const th = i.parentElement;
                const col = th.dataset.column;
                i.classList.remove('fa-arrow-up', 'fa-arrow-down', 'fa-sort');
                if (currentFilters.sortBy === col) {
                    i.classList.add(currentFilters.sortOrder === 'ASC' ? 'fa-arrow-up' : 'fa-arrow-down');
                } else {
                    i.classList.add('fa-sort');
                }
            });
        }

        function applyFilters() {
            currentFilters = {
                status: document.getElementById('filterStatus').value,
                subject: document.getElementById('filterSubject').value,
                priority: document.getElementById('filterPriority').value,
                search: document.getElementById('filterSearch').value,
                from_date: document.getElementById('filterFromDate').value,
                to_date: document.getElementById('filterToDate').value
            };

            Object.keys(currentFilters).forEach(key => {
                if (currentFilters[key] === 'all' || currentFilters[key] === '') {
                    delete currentFilters[key];
                }
            });

            loadSubmissions(1);
        }

        function debounceSearch() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                applyFilters();
            }, 500);
        }

        function refreshSubmissions() {
            loadSubmissions(currentPage);
        }

        async function exportSubmissions() {
            try {
                const params = new URLSearchParams(currentFilters);
                const response = await fetch(`/admin/export/csv?${params}`);

                if (response.ok) {
                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `support_submissions_${new Date().toISOString().split('T')[0]}.csv`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                    showToast('Export completed successfully', 'success');
                } else {
                    throw new Error('Failed to export');
                }
            } catch (error) {
                console.error('Export error:', error);
                showToast('Error exporting data', 'error');
            }
        }

        async function viewSubmission(id) {
            try {
                showLoading(true);
                const response = await fetch(`/admin/submissions/${id}`);

                if (response.ok) {
                    const submission = await response.json();
                    renderSubmissionDetails(submission);
                    currentSubmissionId = id;
                    new bootstrap.Modal(document.getElementById('submissionModal')).show();
                } else {
                    throw new Error('Failed to load submission');
                }
            } catch (error) {
                console.error('Error loading submission:', error);
                showToast('Error loading submission details', 'error');
            } finally {
                showLoading(false);
            }
        }

        function renderSubmissionDetails(submission) {
            document.getElementById('submissionDetails').innerHTML = `
                <div class="row g-4">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0">Basic Information</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">ID</label>
                                    <input type="text" class="form-control" value="${submission.id}" readonly>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Ticket Number</label>
                                    <input type="text" class="form-control" value="${submission.ticket_number || 'N/A'}" readonly>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Subject</label>
                                    <input type="text" class="form-control" value="${submission.subject}" readonly>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Name</label>
                                    <input type="text" class="form-control" value="${submission.name}" readonly>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Email</label>
                                    <input type="email" class="form-control" value="${submission.email}" readonly>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Phone</label>
                                    <input type="text" class="form-control" value="${submission.phone_number || 'N/A'}" readonly>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0">Status & Management</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Status</label>
                                    <select class="form-select" id="modalStatus">
                                        <option value="pending" ${submission.status === 'pending' ? 'selected' : ''}>Pending</option>
                                        <option value="in_progress" ${submission.status === 'in_progress' ? 'selected' : ''}>In Progress</option>
                                        <option value="resolved" ${submission.status === 'resolved' ? 'selected' : ''}>Resolved</option>
                                        <option value="closed" ${submission.status === 'closed' ? 'selected' : ''}>Closed</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Priority</label>
                                    <select class="form-select" id="modalPriority">
                                        <option value="low" ${submission.priority === 'low' ? 'selected' : ''}>Low</option>
                                        <option value="normal" ${submission.priority === 'normal' ? 'selected' : ''}>Normal</option>
                                        <option value="high" ${submission.priority === 'high' ? 'selected' : ''}>High</option>
                                        <option value="urgent" ${submission.priority === 'urgent' ? 'selected' : ''}>Urgent</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Assigned To</label>
                                    <input type="text" class="form-control" id="modalAssigned" value="${submission.assigned_to || ''}" placeholder="Enter assignee name">
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0">Message</h6>
                            </div>
                            <div class="card-body">
                                <div class="bg-light p-3 rounded">${submission.message}</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0">Admin Notes</h6>
                            </div>
                            <div class="card-body">
                                <textarea class="form-control" id="modalAdminNotes" rows="4" placeholder="Add admin notes...">${submission.admin_notes || ''}</textarea>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-header">
                                <h6 class="mb-0">Resolution Notes</h6>
                            </div>
                            <div class="card-body">
                                <textarea class="form-control" id="modalResolutionNotes" rows="4" placeholder="Add resolution notes...">${submission.resolution_notes || ''}</textarea>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        async function saveSubmissionChanges() {
            if (!currentSubmissionId) return;

            try {
                showLoading(true);

                const updates = {
                    status: document.getElementById('modalStatus').value,
                    priority: document.getElementById('modalPriority').value,
                    assigned_to: document.getElementById('modalAssigned').value,
                    admin_notes: document.getElementById('modalAdminNotes').value,
                    resolution_notes: document.getElementById('modalResolutionNotes').value
                };

                const response = await fetch(`/admin/submissions/${currentSubmissionId}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(updates)
                });

                if (response.ok) {
                    showToast('Submission updated successfully', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('submissionModal')).hide();
                    loadSubmissions(currentPage);
                } else {
                    throw new Error('Failed to update submission');
                }
            } catch (error) {
                console.error('Error saving changes:', error);
                showToast('Error saving changes', 'error');
            } finally {
                showLoading(false);
            }
        }

        async function updateStatus(id, status) {
            try {
                const response = await fetch(`/admin/submissions/${id}/status`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status })
                });

                if (response.ok) {
                    showToast(`Status updated to ${status}`, 'success');
                    loadSubmissions(currentPage);
                } else {
                    throw new Error('Failed to update status');
                }
            } catch (error) {
                console.error('Error updating status:', error);
                showToast('Error updating status', 'error');
            }
        }

        async function loadSpamProtection() {
            try {
                showLoading(true);
                const response = await fetch('/admin/blocked');

                if (response.ok) {
                    const entries = await response.json();
                    renderBlockedEntries(entries);
                } else {
                    throw new Error('Failed to load blocked entries');
                }
            } catch (error) {
                console.error('Error loading spam protection:', error);
                showToast('Error loading spam protection data', 'error');
            } finally {
                showLoading(false);
            }
        }

        function renderBlockedEntries(entries) {
            const types = ['emails', 'phones', 'keywords'];

            types.forEach(type => {
                const typeEntries = entries.filter(entry =>
                    entry.type === type.slice(0, -1)
                );

                const container = document.getElementById(`blocked${type.charAt(0).toUpperCase() + type.slice(1)}Table`);

                if (typeEntries.length === 0) {
                    container.innerHTML = `
                        <div class="text-center text-muted py-4">
                            <i class="fas fa-shield-alt fa-2x mb-2"></i>
                            <div>No blocked ${type} found</div>
                        </div>
                    `;
                    return;
                }

                container.innerHTML = `
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Value</th>
                                    <th>Reason</th>
                                    <th>Added By</th>
                                    <th>Date</th>
                                    <th width="80">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${typeEntries.map(entry => `
                                    <tr>
                                        <td class="fw-semibold">${entry.value}</td>
                                        <td>${entry.reason || '-'}</td>
                                        <td>${entry.created_by || 'System'}</td>
                                        <td>${new Date(entry.created_at).toLocaleDateString()}</td>
                                        <td>
                                            <button class="btn btn-sm btn-outline-danger" onclick="removeBlock(${entry.id})" title="Remove Block" aria-label="Remove block ${entry.id}">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                `;
            });
        }

        function showAddBlockModal() {
            document.getElementById('addBlockForm').reset();
            new bootstrap.Modal(document.getElementById('addBlockModal')).show();
        }

        async function addBlock() {
            try {
                const type = document.getElementById('blockType').value;
                const value = document.getElementById('blockValue').value;
                const reason = document.getElementById('blockReason').value;

                if (!value.trim()) {
                    showToast('Please enter a value to block', 'warning');
                    return;
                }

                const response = await fetch('/admin/blocked', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ type, value: value.trim(), reason: reason.trim() })
                });

                if (response.ok) {
                    showToast('Block added successfully', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('addBlockModal')).hide();
                    loadSpamProtection();
                } else {
                    throw new Error('Failed to add block');
                }
            } catch (error) {
                console.error('Error adding block:', error);
                showToast('Error adding block', 'error');
            }
        }

        async function removeBlock(id) {
            if (!confirm('Are you sure you want to remove this block?')) return;

            try {
                const response = await fetch(`/admin/blocked/${id}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showToast('Block removed successfully', 'success');
                    loadSpamProtection();
                } else {
                    throw new Error('Failed to remove block');
                }
            } catch (error) {
                console.error('Error removing block:', error);
                showToast('Error removing block', 'error');
            }
        }

        function getStatusColor(status) {
            const colors = {
                'pending': 'warning',
                'in_progress': 'info',
                'resolved': 'success',
                'closed': 'secondary'
            };
            return colors[status] || 'secondary';
        }

        function getPriorityColor(priority) {
            const colors = {
                'urgent': 'danger',
                'high': 'warning',
                'normal': 'info',
                'low': 'secondary'
            };
            return colors[priority] || 'secondary';
        }

        function truncateText(text, maxLength) {
            if (!text) return '';
            return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
        }

        function exportData() {
            exportSubmissions();
        }

        function clearFilters() {
            document.getElementById('filterStatus').value = 'all';
            document.getElementById('filterSubject').value = 'all';
            document.getElementById('filterPriority').value = 'all';
            document.getElementById('filterSearch').value = '';
            document.getElementById('filterFromDate').value = '';
            document.getElementById('filterToDate').value = '';
            applyFilters();
        }

        function toggleSelectAll(e) {
            const checkboxes = document.querySelectorAll('#submissionsTableBody input[type="checkbox"]');
            checkboxes.forEach(cb => cb.checked = e.target.checked);
        }

        function applyBulkAction() {
            const action = document.getElementById('bulkAction').value;
            if (!action) return showToast('Select an action', 'warning');
            const selected = Array.from(document.querySelectorAll('#submissionsTableBody input[type="checkbox"]:checked'))
                .map(cb => cb.dataset.id);
            if (selected.length === 0) return showToast('No items selected', 'warning');
            // TODO: Implement actual bulk update API call
            // e.g., fetch('/admin/bulk-update', { method: 'POST', body: JSON.stringify({ ids: selected, action }) })
            showToast(`${selected.length} items updated to ${action}`, 'success');
            loadSubmissions(currentPage);
        }

        document.getElementById('submissionModal').addEventListener('shown.bs.modal', () => {
            document.getElementById('modalStatus')?.focus();
        });

        document.getElementById('addBlockModal').addEventListener('shown.bs.modal', () => {
            document.getElementById('blockType').focus();
        });
    </script>
</body>

</html>